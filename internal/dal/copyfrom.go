// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package dal

import (
	"context"
)

// iteratorForCreateEvents implements pgx.CopyFromSource.
type iteratorForCreateEvents struct {
	rows                 []CreateEventsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateEvents) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateEvents) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RoundID,
		r.rows[0].EventType,
		r.rows[0].EventData,
		r.rows[0].RoundTime,
		r.rows[0].EventTime,
	}, nil
}

func (r iteratorForCreateEvents) Err() error {
	return nil
}

func (q *Queries) CreateEvents(ctx context.Context, arg []CreateEventsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"events"}, []string{"round_id", "event_type", "event_data", "round_time", "event_time"}, &iteratorForCreateEvents{rows: arg})
}
